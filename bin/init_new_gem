#!/usr/bin/env ruby

require 'pathname'

def help
  puts <<~HELP
    Generate a boilerplate for a new gem RBS.

    Usage: bin/init_new_gem GEM_NAME
  HELP
end

def put(path, content)
  puts "create #{path}"
  path.dirname.mkpath unless path.dirname.directory?
  path.write(content)
end

def update(path, &block)
  puts "update #{path}"
  new_content = yield path.read
  path.write(new_content)
end

def sh!(*cmd)
  puts "execute #{cmd.join(' ')}"
  system(*cmd, exception: true)
end

if ARGV.size != 1 || %w[--help -h help].include?(ARGV[0])
  help
  exit 1
end

gem_name = ARGV[0]

begin
  puts "Gem version you want to add (MAJOR.MINOR is recommended. e.g. 4.2):"
  print '> '
end while (version = $stdin.gets.chomp).empty?

puts "Your GitHub account if you want to become the maintainer of RBS for this gem (default: skip adding you to the maintainer)"
puts "We recommentd to add your account to maintain the RBS actively."
puts "See https://github.com/ruby/gem_rbs_collection/blob/main/docs/CONTRIBUTING.md#gem-reviewer"
print '> '
github_account = $stdin.gets.chomp.tap { break if _1.empty? }

base = Pathname("gems/#{gem_name}/#{version}")

put base / "#{gem_name}.rbs", <<~RBS
  # Write the type definition here!
RBS
put base / "_test/test.rb", <<~RUBY
  # Write Ruby code to test the RBS.
  # It is type checked by `steep check` command.

  require "#{gem_name}"
RUBY
put base / "_test/metadata.yaml", <<~YAML
  # If the test needs gem's RBS files, declare them here.
  #
  # additional_gems:
  #   - GEM_NAME
YAML
put base / 'manifest.yaml', <<~'YAML'
  # manifest.yaml describes dependencies which do not appear in the gemspec.
  # If this gem includes such dependencies, comment-out the following lines and
  # declare the dependencies.
  # If all dependencies appear in the gemspec, you should remove this file.
  #
  # dependencies:
  #   - name: pathname
YAML

put base.parent / '.rubocop.yml', <<~'YAML'
  # This configuration inherits from /.rubocop.yml.
  # You can configure RBS style of this gem.
  # This file is used on CI. It is configured to automatically
  # make rubocop suggestions on pull requests for this gem.
  # If you do not like the style enforcement, you should remove this file.
  inherit_from: ../../.rubocop.yml

  ##
  # If you want to customize the style, please consult with the gem reviewers.

  RBS/Layout/CommentIndentation:
    Enabled: true
  RBS/Layout/EmptyLinesAroundOverloads:
    Enabled: true
  RBS/Layout/EndAlignment:
    Enabled: true
  RBS/Layout/ExtraSpacing:
    Enabled: true
  RBS/Layout/IndentationWidth:
    Enabled: true
  RBS/Layout/OverloadIndentation:
    Enabled: true
  RBS/Layout/SpaceAroundArrow:
    Enabled: true
  RBS/Layout/SpaceAroundBraces:
    Enabled: true
  RBS/Layout/SpaceAroundOperators:
    Enabled: true
  RBS/Layout/SpaceBeforeColon:
    Enabled: true
  RBS/Layout/SpaceBeforeOverload:
    Enabled: true
  RBS/Layout/TrailingWhitespace:
    Enabled: true

  RBS/Lint/DuplicateOverload:
    Enabled: true
  RBS/Lint/LiteralIntersection:
    Enabled: true
  RBS/Lint/Syntax:
    Enabled: true
  RBS/Lint/UselessOverloadTypeParams:
    Enabled: true
  RBS/Lint/WillSyntaxError:
    Enabled: true

  RBS/Style/BlockReturnBoolish:
    Enabled: true
  RBS/Style/ClassicType:
    Enabled: true
  RBS/Style/DuplicatedType:
    Enabled: true
  RBS/Style/EmptyArgument:
    Enabled: true
  RBS/Style/InitializeReturnType:
    Enabled: true
  RBS/Style/OptionalNil:
    Enabled: true
  RBS/Style/RedundantParentheses:
    Enabled: true
  RBS/Style/TrueFalse:
    Enabled: true
YAML

if github_account
  github_account = github_account.sub('@', '')
  put base.parent / '_reviewers.yaml', <<~YAML
    reviewers:
      - #{github_account}
  YAML
end

puts
puts <<~MESSAGE
  The boilerplate for #{gem_name} gem has been generated.
  Start writing the RBS! We recommend to focus on the main API of #{gem_name}.
  See the CONTRIBUTING.md for more information.
MESSAGE
