module InspecPlugins::StreamingReporterProgressBar
  class StreamingReporter
    # Most currently available Windows terminals have poor support
    # for ANSI extended colors
    COLORS: ::Hash[::String, "\e[0;1;31m" | "\e[0;1;32m" | "\e[0;37m" | "\e[0m" | "\e[34m" | "\e[36m" | "\e[33m"]

    # Most currently available Windows terminals have poor support
    # for UTF-8 characters so use these boring indicators
    INDICATORS: ::Hash[::String, "[FAIL]" | "[SKIP]" | "[PASS]" | "  [ERROR]  " | "  [N/A]    " | "  [N/R]    "]

    # Extended colors for everyone else
    COLORS: ::Hash[::String, "\e[38;5;9m" | "\e[38;5;41m" | "\e[38;5;247m" | "\e[0m" | "\e[0;38;5;21m" | "\e[0;38;5;117m" | "\e[0;38;5;214m"]

    # Groovy UTF-8 characters for everyone else...
    # ...even though they probably only work on Mac
    INDICATORS: ::Hash[::String, ::String | "  [N/A]    " | "  [N/R]    "]

    def initialize: (untyped output) -> void

    def example_passed: (untyped notification) -> untyped

    def example_failed: (untyped notification) -> untyped

    def example_pending: (untyped notification) -> untyped

    private

    def set_example: (untyped notification, untyped status) -> untyped

    def show_progress: (untyped control_id, untyped title, untyped full_description) -> untyped

    def format_it: (untyped control_id, untyped title, untyped full_description) -> untyped

    def format_with_color: (untyped color_name, untyped text) -> untyped

    # status mapping with control id to decide the final state of the control
    def set_status_mapping: (untyped control_id, untyped status) -> untyped
  end
end
