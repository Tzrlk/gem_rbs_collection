module Inspec::Resources

  class NetworkInterface < Inspec::Resource

    def initialize: (untyped iface) -> void

    def exists?: () -> bool

    def up?: () -> bool

    def name: () -> String

    # returns link speed in Mbits/sec
    def speed: () -> Integer?

    def ipv4_address?: () -> bool

    def ipv6_address?: () -> bool

    def ipv4_address: () -> String?

    def ipv4_addresses: () -> Array[String]

    def ipv6_address: () -> String?

    def ipv6_addresses: () -> Array[String]

    def ipv4_addresses_netmask: () -> Array[String]

    def ipv4_cidrs: () -> Array[String]

    def ipv6_cidrs: () -> Array[String]

    def resource_id: () -> ( String | "Interface" )

    def to_s: () -> ::String

    private

    def interface_info: () -> ( {} | {
        name:           String,
        up:             bool,
        speed?:         Integer?,
        ipv4_addresses: Array[String],
        ipv6_addresses: Array[String],
      } )

  end

  class InterfaceInfo
    include Converter

    attr_reader inspec: untyped

    def initialize: (untyped inspec) -> void

  end

  class BsdInterface < InterfaceInfo
    def interface_info: (String iface) -> {
        name: String,
        up:             bool,
        speed?:         Integer,
        ipv4_addresses: Array[String],
        ipv6_addresses: Array[String],
      }?
  end

  class LinuxInterface < InterfaceInfo

    def interface_info: (String iface) -> {
        name:           String,
        up:             bool,
        speed:          Integer?,
        ipv4_addresses: Array[String],
        ipv6_addresses: Array[String],
      }?

    private

    def addresses: (String iface) -> {
        'inet6' => Array[String],
        'inet'  => Array[String],
      }

  end

  class WindowsInterface < InterfaceInfo

    def interface_info: (String iface) -> {
        name:           String,
        up:             bool,
        speed:          Numeric,
        ipv4_addresses: Array[String],
        ipv6_addresses: Array[String],
      }

    private

    def addresses_for_proto: (Array[Hash[String,String]] all_addresses, String iface, String proto) -> Array[String]

  end
end
