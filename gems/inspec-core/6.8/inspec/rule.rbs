module Inspec
  class Rule
    include ::RSpec::Matchers

    attr_reader __waiver_data: untyped

    attr_accessor resource_dsl: untyped

    attr_accessor na_impact_freeze: untyped

    attr_reader __profile_id: untyped

    def initialize: (untyped id, untyped profile_id, untyped resource_dsl, untyped opts) ?{ () -> untyped } -> void

    def to_s: () -> untyped

    def id: (*untyped _) -> untyped

    def impact: (?untyped? v) -> untyped

    def title: (?untyped? v) -> untyped

    def desc: (?untyped? v, ?untyped? data) -> untyped

    def descriptions: (?untyped? description_hash) -> untyped

    def ref: (?untyped? ref, ?::Hash[untyped, untyped] opts) -> untyped

    def tag: (*untyped args) -> untyped

    def source_file: () -> untyped

    # Skip all checks if only_if is false
    #
    # @param [Type] &block returns true if tests are added, false otherwise
    # @return [nil]
    def only_if: (?untyped? message, ?impact: untyped?) { () -> untyped } -> (nil | untyped)

    def only_applicable_if: (?untyped? message) { () -> untyped } -> (nil | untyped)

    # Describe will add one or more tests to this control. There is 2 ways
    # of calling it:
    #
    #   describe resource do ... end
    #
    # or
    #
    #   describe.one do ... end
    #
    # @param [any] Resource to be describe, string, or nil
    # @param [Proc] An optional block containing tests for the described resource
    # @return [nil|DescribeBase] if called without arguments, returns DescribeBase
    def describe: (*untyped values) ?{ () -> untyped } -> untyped

    def expect: (untyped value) ?{ () -> untyped } -> untyped

    # allow attributes to be accessed within control blocks
    def input: (untyped input_name, ?::Hash[untyped, untyped] options) -> untyped

    # Find the Input object, but don't collapse to a value.
    # Will return nil on a miss.
    def input_object: (untyped input_name) -> untyped

    def attribute: (untyped name, ?::Hash[untyped, untyped] options) -> untyped

    # Support for Control DSL plugins.
    # This is called when an unknown method is encountered
    # within a control block.
    def method_missing: (untyped method_name, *untyped arguments) ?{ () -> untyped } -> untyped

    # TODO: figure out why these violations exist and nuke them.
    def self.rule_id: (untyped rule) -> untyped

    def self.set_rule_id: (untyped rule, untyped value) -> untyped

    def self.profile_id: (untyped rule) -> untyped

    def self.checks: (untyped rule) -> untyped

    def self.skip_status: (untyped rule) -> untyped

    def self.na_status: (untyped rule) -> untyped

    def self.set_skip_rule: (untyped rule, untyped value, ?untyped? message, ?::Symbol `type`) -> untyped

    def self.merge_count: (untyped rule) -> untyped

    def self.merge_changes: (untyped rule) -> untyped

    # If a rule is marked to be skipped, this
    # creates a dummay array of "checks" with a skip outcome
    def self.prepare_checks: (untyped rule) -> (untyped | ::Array[::Array["describe" | ::Array[untyped] | nil]])

    def self.merge: (untyped dst, untyped src) -> (nil | untyped)

    private

    def __add_check: (untyped describe_or_expect, untyped values, untyped block) -> untyped

    # Look for an input with a matching ID, and if found, apply waiver
    # skipping logic. Basically, if we have a current waiver, and it says
    # to skip, we'll replace all the checks with a dummy check (same as
    # only_if mechanism)
    # Double underscore: not intended to be called as part of the DSL
    def __apply_waivers: () -> (nil | untyped)

    #
    # Takes a block and returns a block that will run the given block
    # with access to the resource_dsl of the current class. This is to
    # ensure that inside the constructed Rspec::ExampleGroup users
    # have access to DSL methods. Previous this was done in
    # Inspec::Runner before sending the example groups to rspec. It
    # was moved here to ensure that code inside `its` blocks hae the
    # same visibility into resources as code outside its blocks.
    #
    # @param [Proc] block
    # @return [Proc]
    #
    def with_dsl: (untyped block) -> (nil | untyped)

    # Idio(ma)tic unindent, behaves similar to Ruby2.3 curly heredocs.
    # Find the shortest indentation of non-empty lines and strip that from every line
    # See: https://bugs.ruby-lang.org/issues/9098
    #
    # It is implemented here to support pre-Ruby2.3 with this feature and
    # to not force non-programmers to understand heredocs.
    #
    # Please note: tabs are not supported! (they will be removed but they are not
    # treated the same as in Ruby2.3 heredocs)
    #
    # @param [String] text string which needs to be unindented
    # @return [String] input with indentation removed; '' if input is nil
    def unindent: (untyped text) -> ("" | untyped)

    # get the source location of the block
    def __get_block_source_location: () ?{ () -> untyped } -> untyped
  end
end
