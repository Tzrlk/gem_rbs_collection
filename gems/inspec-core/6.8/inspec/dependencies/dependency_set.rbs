module Inspec
  #
  # A DependencySet manages a list of dependencies for a profile.
  #
  class DependencySet
    #
    # Return a dependency set given a lockfile.
    #
    # @param lockfile [Inspec::Lockfile] A lockfile to generate the dependency set from
    # @param cwd [String] Current working directory for relative path includes
    # @param vendor_path [String] Path to the vendor directory
    #
    def self.from_lockfile: (untyped lockfile, untyped config, ?::Hash[untyped, untyped] opts) -> untyped

    def self.from_array: (untyped dependencies, untyped cwd, untyped cache, untyped backend) -> untyped

    # This is experimental code to test the working of the
    # dependency loader - perform a proper dependency related search
    # in the future.
    #
    # Flatten tree because that is all we know how to deal with for
    # right now. Last dep seen for a given name wins right now.
    def self.flatten_dep_tree: (untyped dep_tree) -> untyped

    attr_reader vendor_path: untyped

    attr_accessor dep_list: untyped

    # initialize
    #
    # @param cwd [String] current working directory for relative path includes
    # @param vendor_path [String] path which contains vendored dependencies
    # @return [dependencies] this
    def initialize: (untyped cwd, untyped cache, untyped dep_list, untyped backend) -> void

    def each: () { (untyped) -> untyped } -> untyped

    def list: () -> untyped

    def to_array: () -> (::Array[untyped] | untyped)

    #
    # 1. Get dependencies, pull things to a local cache if necessary
    # 2. Resolve dependencies
    #
    # @param dependencies [Gem::Dependency] list of dependencies
    # @return [nil]
    #
    def vendor: (untyped dependencies) -> (nil | untyped)
  end
end
