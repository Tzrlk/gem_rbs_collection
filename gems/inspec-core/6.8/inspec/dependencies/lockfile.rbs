module Inspec
  class Lockfile
    # When we finalize this feature, we should set these to 1
    MINIMUM_SUPPORTED_VERSION: 1

    CURRENT_LOCKFILE_VERSION: 1

    def self.from_dependency_set: (untyped dep_set) -> untyped

    def self.from_content: (untyped content) -> untyped

    def self.from_file: (untyped path) -> untyped

    def self.validate_lockfile_version!: (untyped version) -> (untyped | untyped | nil)

    attr_reader version: untyped

    attr_reader deps: untyped

    def initialize: (untyped lockfile_content_hash) -> void

    def to_yaml: () -> untyped

    private

    # Refactor this to be "version-wise" - i.e. make one dispatch
    # function for each version so that even if it duplicates code,
    # it can describe the part of the code that it expects to be
    # different. Then that dispatch routine can call more well
    # defined methods like "parse_v0_dependencies" or
    # "parse_flat_dependencies" or what not as things generally
    # develop. It does help people easily set breakpoints/track
    # different entry points of the API.
    def parse_content_hash: (untyped lockfile_content_hash) -> untyped

    def parse_content_hash_1: (untyped lockfile_content_hash) -> untyped

    def mutate_hash_keys_with: (untyped hash, untyped fun) -> untyped

    def stringify_keys: (untyped hash) -> untyped

    def symbolize_keys: (untyped hash) -> untyped
  end
end
