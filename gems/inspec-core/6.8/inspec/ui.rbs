module Inspec
  # Provides simple terminal UI interaction primitives for CLI commands and plugins.
  class UI
    ANSI_CODES: { reset: "\e[0m", bold: "\e[1m", color: { red: "\e[38;5;9m", green: "\e[38;5;41m", yellow: "\e[33m", cyan: "\e[36m", white: "\e[37m", grey: "\e[38;5;247m" } }

    GLYPHS: { bullet: ::String, check: ::String, swirl: ::String, script_x: ::String, question: "?", em_dash: ::String, heavy_dash: ::String, vertical_dash: ::String, table_corner: ::String }

    EXIT_NORMAL: 0

    EXIT_USAGE_ERROR: 1

    EXIT_PLUGIN_ERROR: 2

    EXIT_FATAL_DEPRECATION: 3

    EXIT_GEM_DEPENDENCY_LOAD_ERROR: 4

    EXIT_BAD_SIGNATURE: 5

    EXIT_SIGNATURE_REQUIRED: 6

    EXIT_LICENSE_NOT_ACCEPTED: 172

    EXIT_LICENSE_NOT_ENTITLED: 173

    EXIT_LICENSE_NOT_SET: 174

    EXIT_FAILED_TESTS: 100

    EXIT_SKIPPED_TESTS: 101

    EXIT_TERMINATED_BY_CTL_C: 130

    attr_reader io: untyped

    def initialize: (?::Hash[untyped, untyped] opts) -> void

    def color?: () -> untyped

    def print_or_return: (untyped str, untyped print_flag) -> untyped

    def plain: (untyped str, ?::Hash[untyped, untyped] opts) -> untyped

    def plain_line: (?::String str, ?::Hash[untyped, untyped] opts) -> untyped

    def bold: (untyped str, ?::Hash[untyped, untyped] opts) -> untyped

    def emphasis: (untyped str, ?::Hash[untyped, untyped] opts) -> untyped

    def headline: (untyped str, ?::Hash[untyped, untyped] opts) -> untyped

    # Issues a one-line message, with 'ERROR: ' prepended in bold red.
    def error: (untyped str, ?::Hash[untyped, untyped] opts) -> untyped

    # Issues a one-line message, with 'WARNING: ' prepended in bold yellow.
    def warning: (untyped str, ?::Hash[untyped, untyped] opts) -> untyped

    # Draws a horizontal line.
    def line: (?::Hash[untyped, untyped] opts) -> untyped

    def line_with_width: (?::Integer width, ?::Hash[untyped, untyped] opts) -> untyped

    # Makes a bullet point.
    def list_item: (untyped str, ?::Hash[untyped, untyped] opts) -> untyped

    # Makes a table.  Call with a block; block arg will be a TTY::Table object,
    # with an extension for setting the header.
    # Typical use:
    # ui.table do |t|
    #   t.header = ['Name', 'Rank', 'Cereal Number']
    #   t << ['Crunch', 'Captain', 1]
    #   t << ['', '', 1]
    #  end
    def table: (?::Hash[untyped, untyped] opts) { (untyped) -> untyped } -> untyped

    def exit: (?::Symbol code_sym) -> untyped

    # ========================================================================#
    #                        Interactivity
    # ========================================================================#
    def interactive?: () -> untyped

    # This simply returns a TTY::Prompt object, gated on interactivity being enabled.
    def prompt: () -> untyped
  end
end
