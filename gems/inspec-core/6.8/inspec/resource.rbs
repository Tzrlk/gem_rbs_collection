module Inspec
  class ProfileNotFound < StandardError
  end

  class Resource
    def self.name: (?untyped? value) -> untyped

    def self.desc: (?untyped? value) -> untyped

    def self.example: (?untyped? value) -> untyped

    def self.supports: (?untyped? criteria) -> (nil | untyped)

    def resource_id: (?untyped? value) -> untyped

    def supersuper_initialize: (untyped backend, untyped name) { () -> untyped } -> untyped

    def check_supported!: () -> untyped

    # Support for Resource DSL plugins.
    # This is called when an unknown method is encountered
    # within a resource class definition.
    # Even tho this is defined as an instance method, it gets added to
    # the class via `extend`, so this is actually a class defintion.
    def self.method_missing: (untyped method_name, *untyped arguments) ?{ () -> untyped } -> untyped

    def self.__register: (untyped name, untyped resource_klass) -> untyped

    def self.__resource_registry: () -> untyped

    def self.__resource_registry=: (untyped o) -> untyped

    def self.default_registry: () -> untyped

    # TODO: these are keyed off of strings
    def self.registry: () -> untyped

    # TODO: these are keyed off of symbols
    def self.support_registry: () -> untyped

    def self.new_registry: () -> untyped

    def self.backfill_supports!: () -> untyped

    def to_s: () -> untyped

    def self.toggle_inspect: () -> untyped

    attr_reader resource_exception_message: untyped

    def skip_resource: (untyped message) -> untyped

    def resource_skipped?: () -> untyped

    def fail_resource: (untyped message) -> untyped

    def resource_failed?: () -> untyped

    def check_supports: () -> untyped

    def inspec: () -> untyped
  end

  # Retrieve the base class for creating a new resource.
  # Create classes that inherit from this class.
  #
  # @param [int] version the resource version to use
  # @return [Resource] base class for creating a new resource
  def self.resource: (untyped version) -> untyped

  def self.validate_resource_dsl_version!: (untyped version) -> (untyped | nil)
end

class Module
  # Any use of this is an anti-pattern caused by our use of negligent
  # design and metaprogramming nonsense. We should work it out... but
  # there are many hurdles in our way.
  def find_class_instance_variable: (untyped k) -> untyped
end
