module ChefCLI
	module Policyfile

		class CookbookLocationSpecification

			type source_type_remote
				= :git
				| :github
				| :artifactserver
				| :chef_server
				| :chef_server_artifact
				| :artifactory
			type source_type
				= source_type_remote
				| :path
			type source_options = Hash[Symbol, untyped]

			include StorageConfigDelegation

			SOURCE_TYPES: [:git, :github, :path, :artifactserver, :chef_server, :chef_server_artifact, :artifactory]

			@installer: CookbookOmnifetch

			attr_reader version_constraint: String

			attr_reader name: String

			attr_reader source_options: source_options
			attr_reader source_type: source_type
			attr_reader storage_config: StorageConfig

			def initialize
				: (String, String, source_options, StorageConfig) -> void

			def ==
				: (untyped) -> bool

			def to_s
				: () -> String

			def mirrors_canonical_upstream?
				: () -> bool

			def installed?
				: () -> bool

			def ensure_cached
				: () -> void

			def valid?
				: () -> bool

			def errors
				: () -> Array[String]

			def installer
				: () -> CookbookOmnifetch::BaseLocation

			def cache_key
				: () -> String

			def relative_path
				: () -> String

			def uri
				: () -> URI

			def version_fixed?
				: () -> bool

			def version
				: () -> String

			# FIXME: Return type is speculative.
			def dependencies
				: () -> Array[CookbookOmnifetch::_Dependency]

			def cookbook_has_recipe?
				: (String) -> bool

			def cached_cookbook
				: () -> CachedCookbook

			def source_options_for_lock
				: () -> Hash[String, String]

			def source_options_invalid?
				: () -> bool

			def cookbook_path
				: () -> String

		end
	end
end
