module ChefCLI
	module Policyfile
		class DSL

			type cookbook_opts = {
					?path: String,
					?git: String,
					?branch: String,
					?tag: String,
					?github: String,
				}

			RUN_LIST_ITEM_COMPONENT: Regexp

			include StorageConfigDelegation

			attr_writer name: String?

			attr_reader errors: Array[String]
			attr_writer run_list: Array[String]
			attr_writer default_source: Array[_CookbookSource]
			attr_reader cookbook_location_specs: Hash[String, CookbookLocationSpecification]
			attr_reader included_policies: untyped

			attr_reader named_run_lists: Hash[String, Array[String]]
			attr_reader node_attributes: Chef::Node::Attribute

			attr_reader storage_config: StorageConfig

			attr_reader chef_config: untyped?

			def initialize
				: (StorageConfig, ?chef_config: untyped?) -> void

			def name
				: (String) -> String
				| (String?) -> String?
				| () -> String?

			def run_list
				: (*(String | Array[String])) -> Array[String]

			def named_run_list
				: (String, *(String | Array[String])) -> Array[String]

			def default_source
				: (?Symbol?, ?String?) ?{ (_CookbookSource) -> void } -> Array[_CookbookSource]
				| () -> Array[_CookbookSource]

			def cookbook
				: (String, String?, cookbook_opts) -> void
				| (String, cookbook_opts) -> void
				| (String, String?) -> void
				| (String) -> void

			def include_policy
				: (String, ?Hash[Symbol, untyped]) -> void

			def metadata
				: () -> void

			def default
				: () -> Chef::Node::VividMash

			def override
				: () -> Chef::Node::VividMash

			def eval_policyfile
				: (String) -> self

		private

			def set_default_community_source
				: (String) { (CommunityCookbookSource) -> void } -> ( Array[_CookbookSource] & [ CommunityCookbookSource ] )

			def set_default_delivery_supermarket_source
				: (String) { (DeliverySupermarketSource) -> void } -> ( Array[_CookbookSource] & [ DeliverySupermarketSource ] )

			def set_default_chef_server_source
				: (String) { (ChefServerCookbookSource) -> void } -> ( Array[_CookbookSource] & [ ChefServerCookbookSource ] )

			def set_default_artifactory_source
				: (String) { (ArtifactoryCookbookSource) -> void } -> ( Array[_CookbookSource] & [ ArtifactoryCookbookSource ] )

			def set_default_chef_repo_source
				: (String) { (ChefRepoCookbookSource) -> void } -> ( Array[_CookbookSource] & [ ChefRepoCookbookSource ] )

			def set_default_source
				: [T < _CookbookSource] (T) -> ( Array[_CookbookSource] & Array[T] )

			def validate!
				: () -> bool

			def validate_run_list_items
				: (Array[String], ?String?) -> void

			def handle_preferred_cookbooks_conflicts
				: () -> void

			def error_context
				: (String, String, Exception) -> ( String | "Could not find relevant code from backtrace" )

			def culprit_line_number
				: (String, Exception) -> Integer?

			def filtered_bt
				: (String, Exception) -> Array[String]

		end
	end
end
